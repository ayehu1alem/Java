import java.util.Arrays;

public class Main {
	public static void main(String[] args) {
		int[] c = {9, 7, 1, 5, 2, 11};
		mergeSort2(c);
        
        System.out.println("Merge Sort: " + Arrays.toString(c));
		
	}
	public static void mergeSort2(int[] arr) {
        mergeSort(arr, 0, arr.length - 1);
    }

    private static void mergeSort(int[] arr, int left, int right) {
        if (left < right) {
            if (right - left <= 5) {
                // For small arrays, use insertion sort
                insertionSort(arr, left, right);
            } 
            else if((right - left > 5) && (right - left <= 10)){
                selectionSort(arr, left, right);
            }
            else {
                int mid = left + (right - left) / 2;  // Avoid potential overflow
                mergeSort(arr, left, mid);
                mergeSort(arr, mid + 1, right);
                merge(arr, left, mid, right);
            }
        }
    }

    private static void merge(int[] arr, int left, int mid, int right) {
        int n1 = mid - left + 1;
        int n2 = right - mid;

        int[] L = new int[n1];
        int[] R = new int[n2];

        for (int i = 0; i < n1; ++i) {
            L[i] = arr[left + i];
        }
        for (int j = 0; j < n2; ++j) {
            R[j] = arr[mid + 1 + j];
        }

        int i = 0, j = 0, k = left;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            } else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }

        while (i < n1) {
            arr[k++] = L[i++];
        }

        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }
}