

import java.util.Random;
import java.util.*;

public class Main {
	public static void main(String[] args) {
		
		int[] unsortedArray = {5, 2, 7, 1, 4, 3, 6};
        quickSort(unsortedArray, 0, unsortedArray.length - 1);
        System.out.println("Sorted array: " + Arrays.toString(unsortedArray));
		
	/*	Random r = new Random();
		
		int[] un = new int[10];
		
		for(int i =0; i<un.length; i++){
		     un[i] = r.nextInt(10);
		}
        
        quickSort(un);
        System.out.print("  " + Arrays.toString(un));
	*/	
	}
	private static void quickSort(int[] a){
	    quickSort(a, 0, a.length-1);
	}
	private static void quickSort(int[] a, int l, int h){
	    if(l >= h) return;
	    
	    int m = (l + h)/2;
	    
	    int pivotIndex = new Random().nextInt(h - l +1) + l;
	    
	    //a[l] < a[h] ? l : m;
	    
	    //new Random().nextInt(h-l) + l;
	    
	    int pivot = a[pivotIndex];
	    
	    swap(a, pivotIndex, h);
	    
	    int lP = partition(a, l, h, pivot);
	    
	    quickSort(a, l, lP - 1);
	    quickSort(a, lP + 1, h);
	    
	}
	
	private static int partition(int[] a, int l, int h, int pivot){
	    
	    int lP = l;
	    int rP = h-1;
	    
	    while(lP < rP){
	        while(a[lP] <= pivot && lP < rP) lP++;
	        
	        while(a[rP] >= pivot && lP < rP) rP--;
	        
	        swap(a, lP, rP);
	    }
	    if(a[l] > a[h]) swap(a, lP, h);
	    
	    else lP = h;
	    
	    return lP;
	}
	
	private static void swap(int[] a, int i, int j){
	    a[j] = (a[i] + a[j]) - (a[i] = a[j]);
	}
}


